-- VHDL Entity alien_game_lib.register_bank_row_struct.symbol
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-306-SPC)
--          at - 21:55:05  6.04.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY register_bank_row_struct IS
   PORT( 
      clk          : IN     std_logic;
      color_in     : IN     std_logic_vector (23 DOWNTO 0);
      nullifier    : IN     std_logic;
      rst_n        : IN     std_logic;
      write_enable : IN     std_logic;
      x_in         : IN     std_logic_vector (7 DOWNTO 0);
      color_output : OUT    std_logic_vector (23 DOWNTO 0)
   );

-- Declarations

END register_bank_row_struct ;

--
-- VHDL Architecture alien_game_lib.register_bank_row_struct.struct
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-306-SPC)
--          at - 21:55:05  6.04.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF register_bank_row_struct IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL color_out  : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_out1 : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_out2 : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_out3 : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_out4 : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_out5 : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_out6 : std_logic_vector(23 DOWNTO 0);
   SIGNAL din7       : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout       : std_logic;
   SIGNAL dout0      : std_logic;
   SIGNAL dout1      : std_logic;
   SIGNAL dout10     : std_logic;
   SIGNAL dout11     : std_logic;
   SIGNAL dout12     : std_logic;
   SIGNAL dout13     : std_logic;
   SIGNAL dout14     : std_logic;
   SIGNAL dout2      : std_logic;
   SIGNAL dout3      : std_logic;
   SIGNAL dout4      : std_logic;
   SIGNAL dout5      : std_logic;
   SIGNAL dout6      : std_logic;
   SIGNAL dout7      : std_logic;
   SIGNAL dout8      : std_logic;
   SIGNAL dout9      : std_logic;


   -- ModuleWare signal declarations(v1.12) for instance 'U_11' of 'split'
   SIGNAL mw_U_11temp_din : std_logic_vector(7 DOWNTO 0);

   -- Component Declarations
   COMPONENT register_bank_mem_cell
   PORT (
      clk         : IN     std_logic ;
      color_in    : IN     std_logic_vector (23 DOWNTO 0);
      nullify     : IN     std_logic ;
      rst_n       : IN     std_logic ;
      write_ready : IN     std_logic ;
      color_out   : OUT    std_logic_vector (23 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : register_bank_mem_cell USE ENTITY alien_game_lib.register_bank_mem_cell;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_0' of 'and'
   dout <= write_enable AND dout0;

   -- ModuleWare code(v1.12) for instance 'U_2' of 'and'
   dout8 <= write_enable AND dout1;

   -- ModuleWare code(v1.12) for instance 'U_3' of 'and'
   dout9 <= write_enable AND dout2;

   -- ModuleWare code(v1.12) for instance 'U_4' of 'and'
   dout10 <= write_enable AND dout3;

   -- ModuleWare code(v1.12) for instance 'U_5' of 'and'
   dout11 <= write_enable AND dout4;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'and'
   dout12 <= write_enable AND dout5;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'and'
   dout13 <= write_enable AND dout6;

   -- ModuleWare code(v1.12) for instance 'U_9' of 'and'
   dout14 <= write_enable AND dout7;

   -- ModuleWare code(v1.12) for instance 'U_1' of 'omux'
   u_1combo_proc: PROCESS(color_out, color_out1, color_out2, color_out3, 
                          color_out6, color_out5, color_out4, din7, 
                          x_in)
   BEGIN
      color_output <= (OTHERS => 'X');
      CASE x_in IS
      WHEN "00000001" => color_output <= color_out;
      WHEN "00000010" => color_output <= color_out1;
      WHEN "00000100" => color_output <= color_out2;
      WHEN "00001000" => color_output <= color_out3;
      WHEN "00010000" => color_output <= color_out6;
      WHEN "00100000" => color_output <= color_out5;
      WHEN "01000000" => color_output <= color_out4;
      WHEN "10000000" => color_output <= din7;
      WHEN OTHERS => color_output <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_1combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_11' of 'split'
   mw_U_11temp_din <= x_in;
   u_11combo_proc: PROCESS (mw_U_11temp_din)
   VARIABLE temp_din: std_logic_vector(7 DOWNTO 0);
   BEGIN
      temp_din := mw_U_11temp_din(7 DOWNTO 0);
      dout0 <= temp_din(0);
      dout1 <= temp_din(1);
      dout2 <= temp_din(2);
      dout3 <= temp_din(3);
      dout4 <= temp_din(4);
      dout5 <= temp_din(5);
      dout6 <= temp_din(6);
      dout7 <= temp_din(7);
   END PROCESS u_11combo_proc;

   -- Instance port mappings.
   U_7 : register_bank_mem_cell
      PORT MAP (
         clk         => clk,
         color_in    => color_in,
         nullify     => nullifier,
         rst_n       => rst_n,
         write_ready => dout14,
         color_out   => din7
      );
   U_10 : register_bank_mem_cell
      PORT MAP (
         clk         => clk,
         color_in    => color_in,
         nullify     => nullifier,
         rst_n       => rst_n,
         write_ready => dout13,
         color_out   => color_out4
      );
   U_15 : register_bank_mem_cell
      PORT MAP (
         clk         => clk,
         color_in    => color_in,
         nullify     => nullifier,
         rst_n       => rst_n,
         write_ready => dout12,
         color_out   => color_out5
      );
   U_19 : register_bank_mem_cell
      PORT MAP (
         clk         => clk,
         color_in    => color_in,
         nullify     => nullifier,
         rst_n       => rst_n,
         write_ready => dout11,
         color_out   => color_out6
      );
   U_22 : register_bank_mem_cell
      PORT MAP (
         clk         => clk,
         color_in    => color_in,
         nullify     => nullifier,
         rst_n       => rst_n,
         write_ready => dout10,
         color_out   => color_out3
      );
   U_23 : register_bank_mem_cell
      PORT MAP (
         clk         => clk,
         color_in    => color_in,
         nullify     => nullifier,
         rst_n       => rst_n,
         write_ready => dout9,
         color_out   => color_out2
      );
   U_24 : register_bank_mem_cell
      PORT MAP (
         clk         => clk,
         color_in    => color_in,
         nullify     => nullifier,
         rst_n       => rst_n,
         write_ready => dout8,
         color_out   => color_out1
      );
   U_25 : register_bank_mem_cell
      PORT MAP (
         clk         => clk,
         color_in    => color_in,
         nullify     => nullifier,
         rst_n       => rst_n,
         write_ready => dout,
         color_out   => color_out
      );

END struct;
