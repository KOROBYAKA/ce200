-- VHDL Entity alien_game_lib.shield_reset.symbol
--
-- Created:
--          by - txdava.UNKNOWN (HTC219-305-SPC)
--          at - 15:47:39 10.03.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY shield_reset IS
   PORT( 
      clk   : IN     std_logic;
      rst_n : IN     std_logic;
      done  : OUT    std_logic;
      s_rst : OUT    std_logic
   );

-- Declarations

END shield_reset ;

--
-- VHDL Architecture alien_game_lib.shield_reset.fsm
--
-- Created:
--          by - txdava.UNKNOWN (HTC219-305-SPC)
--          at - 17:07:59 10.03.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF shield_reset IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s4,
      s2
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(6 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(6 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s4 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= s0;
         csm_timer <= (OTHERS => '0');
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      csm_timeout,
      current_state,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s4 <= '0';
      CASE current_state IS
         WHEN s0 => 
            IF (rst_n = '1') THEN 
               next_state <= s4;
               csm_to_s4 <= '1';
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            next_state <= s2;
         WHEN s4 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s1;
            ELSE
               next_state <= s4;
            END IF;
         WHEN s2 => 
            next_state <= s2;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      done <= '0';
      s_rst <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN s1 => 
            s_rst <= '1';
         WHEN s2 => 
            s_rst <= '1';
            done <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s4
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s4 = '1') THEN
         csm_next_timer <= "1100011"; -- no cycles(100)-1=99
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
