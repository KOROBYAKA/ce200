-- VHDL Entity alien_game_lib.game.symbol
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-310-SPC)
--          at - 13:04:37 23.04.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY game IS
   PORT( 
      btn         : IN     std_logic_vector (3 DOWNTO 0);
      clk         : IN     std_logic;
      rst_n       : IN     std_logic;
      write_ready : IN     std_logic;
      color_BGR   : OUT    std_logic_vector (23 DOWNTO 0);
      frame_done  : OUT    std_logic;
      write       : OUT    std_logic;
      x_coord     : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord     : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END game ;

--
-- VHDL Architecture alien_game_lib.game.struct
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-310-SPC)
--          at - 13:04:37 23.04.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF game IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL bullet_x      : std_logic_vector(7 DOWNTO 0);
   SIGNAL bullet_x1     : std_logic_vector(7 DOWNTO 0);
   SIGNAL bullet_y      : std_logic_vector(7 DOWNTO 0);
   SIGNAL color         : std_logic_vector(23 DOWNTO 0);
   SIGNAL color1        : std_logic_vector(23 DOWNTO 0);
   SIGNAL color2        : std_logic_vector(23 DOWNTO 0);
   SIGNAL color3        : std_logic_vector(23 DOWNTO 0);
   SIGNAL effect_y      : std_logic_vector(7 DOWNTO 0);
   SIGNAL enable        : std_logic;
   SIGNAL gun_px_idx    : std_logic_vector(1 DOWNTO 0);
   SIGNAL hit           : std_logic;
   SIGNAL hit_out       : std_logic_vector(3 DOWNTO 0);
   SIGNAL module_select : std_logic_vector(1 DOWNTO 0);
   SIGNAL win_or_lose   : std_logic;
   SIGNAL x             : std_logic_vector(7 DOWNTO 0);
   SIGNAL x1            : std_logic_vector(7 DOWNTO 0);
   SIGNAL x2            : std_logic_vector(7 DOWNTO 0);
   SIGNAL y             : std_logic_vector(7 DOWNTO 0);
   SIGNAL y1            : std_logic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT alien_hit_logic
   PORT (
      alien_x  : IN     std_logic_vector (7 DOWNTO 0);
      alien_y  : IN     std_logic_vector (7 DOWNTO 0);
      bullet_x : IN     std_logic_vector (7 DOWNTO 0);
      bullet_y : IN     std_logic_vector (7 DOWNTO 0);
      hit      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT alien_hp2
   PORT (
      clk     : IN     std_logic ;
      hit_in  : IN     std_logic ;
      rst     : IN     std_logic ;
      clr_out : OUT    std_logic_vector (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT bullet
   PORT (
      btn      : IN     std_logic_vector (3 DOWNTO 0);
      clk      : IN     std_logic ;
      enable   : IN     std_logic ;
      rst      : IN     std_logic ;
      x_in     : IN     std_logic_vector (7 DOWNTO 0);
      bullet_x : OUT    std_logic_vector (7 DOWNTO 0);
      bullet_y : OUT    std_logic_vector (7 DOWNTO 0);
      color    : OUT    std_logic_vector (23 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c3_t1_basic_alien
   PORT (
      clk     : IN     std_logic ;
      enable  : IN     std_logic ;
      hit_out : IN     std_logic_vector (3 DOWNTO 0);
      rst     : IN     std_logic ;
      color   : OUT    std_logic_vector (23 DOWNTO 0);
      x       : OUT    std_logic_vector (7 DOWNTO 0);
      y       : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT color_effect
   PORT (
      clk         : IN     std_logic ;
      rst         : IN     std_logic ;
      win_or_lose : IN     std_logic ;
      color       : OUT    std_logic_vector (23 DOWNTO 0);
      x           : OUT    std_logic_vector (7 DOWNTO 0);
      y           : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT game_logic_mux
   PORT (
      alien_color   : IN     std_logic_vector (23 DOWNTO 0);
      alien_x       : IN     std_logic_vector (7 DOWNTO 0);
      alien_y       : IN     std_logic_vector (7 DOWNTO 0);
      bullet_color  : IN     std_logic_vector (23 DOWNTO 0);
      bullet_x      : IN     std_logic_vector (7 DOWNTO 0);
      bullet_y      : IN     std_logic_vector (7 DOWNTO 0);
      effect_color  : IN     std_logic_vector (23 DOWNTO 0);
      effect_x      : IN     std_logic_vector (7 DOWNTO 0);
      effect_y      : IN     std_logic_vector (7 DOWNTO 0);
      gun_color     : IN     std_logic_vector (23 DOWNTO 0);
      gun_x         : IN     std_logic_vector (7 DOWNTO 0);
      gun_y         : IN     std_logic_vector (7 DOWNTO 0);
      module_select : IN     std_logic_vector (1 DOWNTO 0);
      output_color  : OUT    std_logic_vector (23 DOWNTO 0);
      output_x      : OUT    std_logic_vector (7 DOWNTO 0);
      output_y      : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT gun
   PORT (
      btn        : IN     std_logic_vector (3 DOWNTO 0);
      clk        : IN     std_logic ;
      enable     : IN     std_logic ;
      gun_px_idx : IN     std_logic_vector (1 DOWNTO 0);
      rst_n      : IN     std_logic ;
      bullet_x   : OUT    std_logic_vector (7 DOWNTO 0);
      color      : OUT    std_logic_vector (23 DOWNTO 0);
      x          : OUT    std_logic_vector (7 DOWNTO 0);
      y          : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT write_sequencer
   PORT (
      alien_defeated : IN     std_logic_vector (23 DOWNTO 0);
      clk            : IN     std_logic ;
      rst_n          : IN     std_logic ;
      write_ready    : IN     std_logic ;
      y_in           : IN     std_logic_vector (7 DOWNTO 0);
      enable         : OUT    std_logic ;
      frame_done     : OUT    std_logic ;
      gun_px_idx     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      win_or_lose    : OUT    std_logic ;
      write          : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : alien_hit_logic USE ENTITY alien_game_lib.alien_hit_logic;
   FOR ALL : alien_hp2 USE ENTITY alien_game_lib.alien_hp2;
   FOR ALL : bullet USE ENTITY alien_game_lib.bullet;
   FOR ALL : c3_t1_basic_alien USE ENTITY alien_game_lib.c3_t1_basic_alien;
   FOR ALL : color_effect USE ENTITY alien_game_lib.color_effect;
   FOR ALL : game_logic_mux USE ENTITY alien_game_lib.game_logic_mux;
   FOR ALL : gun USE ENTITY alien_game_lib.gun;
   FOR ALL : write_sequencer USE ENTITY alien_game_lib.write_sequencer;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_5 : alien_hit_logic
      PORT MAP (
         alien_x  => x1,
         alien_y  => y1,
         bullet_x => bullet_x,
         bullet_y => bullet_y,
         hit      => hit
      );
   U_6 : alien_hp2
      PORT MAP (
         clk     => clk,
         hit_in  => hit,
         rst     => rst_n,
         clr_out => hit_out
      );
   U_3 : bullet
      PORT MAP (
         btn      => btn,
         clk      => clk,
         enable   => enable,
         rst      => rst_n,
         x_in     => bullet_x1,
         bullet_x => bullet_x,
         bullet_y => bullet_y,
         color    => color
      );
   U_1 : c3_t1_basic_alien
      PORT MAP (
         clk     => clk,
         enable  => enable,
         hit_out => hit_out,
         rst     => rst_n,
         color   => color2,
         x       => x1,
         y       => y1
      );
   U_7 : color_effect
      PORT MAP (
         clk         => clk,
         rst         => rst_n,
         win_or_lose => win_or_lose,
         color       => color3,
         x           => x2,
         y           => effect_y
      );
   U_4 : game_logic_mux
      PORT MAP (
         alien_color   => color2,
         alien_x       => x1,
         alien_y       => y1,
         bullet_color  => color,
         bullet_x      => bullet_x,
         bullet_y      => bullet_y,
         effect_color  => color3,
         effect_x      => x2,
         effect_y      => effect_y,
         gun_color     => color1,
         gun_x         => x,
         gun_y         => y,
         module_select => module_select,
         output_color  => color_BGR,
         output_x      => x_coord,
         output_y      => y_coord
      );
   U_2 : gun
      PORT MAP (
         btn        => btn,
         clk        => clk,
         enable     => enable,
         gun_px_idx => gun_px_idx,
         rst_n      => rst_n,
         bullet_x   => bullet_x1,
         color      => color1,
         x          => x,
         y          => y
      );
   U_0 : write_sequencer
      PORT MAP (
         alien_defeated => color2,
         clk            => clk,
         rst_n          => rst_n,
         write_ready    => write_ready,
         y_in           => y1,
         enable         => enable,
         frame_done     => frame_done,
         gun_px_idx     => gun_px_idx,
         module_select  => module_select,
         win_or_lose    => win_or_lose,
         write          => write
      );

END struct;
