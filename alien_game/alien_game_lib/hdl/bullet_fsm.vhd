-- VHDL Entity alien_game_lib.bullet.symbol
--
-- Created:
--          by - txdava.UNKNOWN (HTC219-316-SPC)
--          at - 21:24:51  6.03.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY bullet IS
   PORT( 
      btn      : IN     std_logic_vector (3 DOWNTO 0);
      clk      : IN     std_logic;
      enable   : IN     std_logic;
      rst      : IN     std_logic;
      x_in     : IN     std_logic_vector (7 DOWNTO 0);
      bullet_x : OUT    std_logic_vector (7 DOWNTO 0);
      bullet_y : OUT    std_logic_vector (7 DOWNTO 0);
      color    : OUT    std_logic_vector (23 DOWNTO 0)
   );

-- Declarations

END bullet ;

--
-- VHDL Architecture alien_game_lib.bullet.fsm
--
-- Created:
--          by - txdava.UNKNOWN (HTC219-316-SPC)
--          at - 15:50:00 20.03.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF bullet IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3,
      s4,
      s5,
      s6
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL bullet_x_cld : std_logic_vector (7 DOWNTO 0);

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
         -- Default Reset Values
         bullet_x_cld <= (others => '0');
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;

         -- Combined Actions
         CASE current_state IS
            WHEN s0 => 
               bullet_x_cld <= x_in;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      btn,
      current_state,
      enable
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (btn(0) = '1' AND enable = '1') THEN 
               next_state <= s1;
            ELSIF (btn(0) = '0') THEN 
               next_state <= s0;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (enable = '1') THEN 
               next_state <= s2;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            IF (enable = '1') THEN 
               next_state <= s3;
            ELSE
               next_state <= s2;
            END IF;
         WHEN s3 => 
            IF (enable = '1') THEN 
               next_state <= s4;
            ELSE
               next_state <= s3;
            END IF;
         WHEN s4 => 
            IF (enable = '1') THEN 
               next_state <= s5;
            ELSE
               next_state <= s4;
            END IF;
         WHEN s5 => 
            IF (enable = '1') THEN 
               next_state <= s6;
            ELSE
               next_state <= s5;
            END IF;
         WHEN s6 => 
            IF (enable = '1') THEN 
               next_state <= s0;
            ELSE
               next_state <= s6;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            bullet_y <= "01000000";
         WHEN s1 => 
            bullet_y <= "00100000";
            color <= "010110101011010101011010";
         WHEN s2 => 
            bullet_y <= "00010000";
            color <= "010110101011010101011010";
         WHEN s3 => 
            bullet_y <= "00001000";
            color <= "010110101011010101011010";
         WHEN s4 => 
            bullet_y <= "00000100";
            color <= "010110101011010101011010";
         WHEN s5 => 
            bullet_y <= "00000010";
            color <= "010110101011010101011010";
         WHEN s6 => 
            bullet_y <= "00000001";
            color <= "010110101011010101011010";
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   bullet_x <= bullet_x_cld;
END fsm;
