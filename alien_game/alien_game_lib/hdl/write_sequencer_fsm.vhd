-- VHDL Entity alien_game_lib.write_sequencer.symbol
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-313-SPC)
--          at - 20:13:43 17.04.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY write_sequencer IS
   PORT( 
      alien_defeated : IN     std_logic_vector (23 DOWNTO 0);
      clk            : IN     std_logic;
      rst_n          : IN     std_logic;
      write_ready    : IN     std_logic;
      y_in           : IN     std_logic_vector (7 DOWNTO 0);
      enable         : OUT    std_logic;
      frame_done     : OUT    std_logic;
      gun_px_idx     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      win_or_lose    : OUT    std_logic;
      write          : OUT    std_logic
   );

-- Declarations

END write_sequencer ;

--
-- VHDL Architecture alien_game_lib.write_sequencer.fsm
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-313-SPC)
--          at - 20:13:42 17.04.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF write_sequencer IS

   TYPE STATE_TYPE IS (
      s0,
      s17,
      s10,
      s11,
      s13,
      s3,
      s12,
      s1,
      s4,
      s2,
      s5,
      s6,
      s7,
      s8,
      s18,
      s9,
      s14,
      s19
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(23 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s1 : std_logic;
   SIGNAL csm_to_s8 : std_logic;
   SIGNAL csm_to_s14 : std_logic;

   -- Declare any pre-registered internal signals
   SIGNAL enable_int : std_logic ;
   SIGNAL frame_done_int : std_logic ;
   SIGNAL gun_px_idx_int : std_logic_vector (1 DOWNTO 0);
   SIGNAL module_select_int : std_logic_vector (1 DOWNTO 0);
   SIGNAL win_or_lose_int : std_logic ;
   SIGNAL write_int : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= s0;
         csm_timer <= (OTHERS => '0');
         -- Default Reset Values
         enable <= '0';
         frame_done <= '0';
         gun_px_idx <= (others => '0');
         module_select <= (others => '0');
         win_or_lose <= '0';
         write <= '0';
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         -- Registered output assignments
         enable <= enable_int;
         frame_done <= frame_done_int;
         gun_px_idx <= gun_px_idx_int;
         module_select <= module_select_int;
         win_or_lose <= win_or_lose_int;
         write <= write_int;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      alien_defeated,
      csm_timeout,
      current_state,
      write_ready,
      y_in
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s1 <= '0';
      csm_to_s8 <= '0';
      csm_to_s14 <= '0';
      CASE current_state IS
         WHEN s0 => 
            IF (write_ready = '0') THEN 
               next_state <= s0;
            ELSIF (alien_defeated = "000000000000000000000000" AND write_ready = '1') THEN 
               next_state <= s5;
            ELSIF (y_in = "01000000" AND write_ready = '1') THEN 
               next_state <= s6;
            ELSIF (write_ready = '1' AND alien_defeated /= "000000000000000000000000") THEN 
               next_state <= s3;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s17 => 
            next_state <= s1;
            csm_to_s1 <= '1';
         WHEN s10 => 
            next_state <= s2;
         WHEN s11 => 
            next_state <= s10;
         WHEN s13 => 
            next_state <= s11;
         WHEN s3 => 
            next_state <= s12;
         WHEN s12 => 
            next_state <= s13;
         WHEN s1 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s4;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s4 => 
            next_state <= s0;
         WHEN s2 => 
            next_state <= s17;
         WHEN s5 => 
            next_state <= s18;
         WHEN s6 => 
            next_state <= s19;
         WHEN s7 => 
            next_state <= s5;
         WHEN s8 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s7;
            ELSE
               next_state <= s8;
            END IF;
         WHEN s18 => 
            next_state <= s8;
            csm_to_s8 <= '1';
         WHEN s9 => 
            next_state <= s6;
         WHEN s14 => 
            IF (csm_timeout = '1') THEN 
               next_state <= s9;
            ELSE
               next_state <= s14;
            END IF;
         WHEN s19 => 
            next_state <= s14;
            csm_to_s14 <= '1';
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      enable_int <= '0';
      frame_done_int <= '0';
      gun_px_idx_int <= (others => '0');
      module_select_int <= (others => '0');
      win_or_lose_int <= '0';
      write_int <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN s17 => 
            frame_done_int <= '1';
         WHEN s10 => 
            gun_px_idx_int <= "11";
            module_select_int <= "01";
            write_int <= '1';
         WHEN s11 => 
            gun_px_idx_int <= "10";
            module_select_int <= "01";
            write_int <= '1';
         WHEN s13 => 
            gun_px_idx_int <= "00";
            module_select_int <= "01";
            write_int <= '1';
         WHEN s3 => 
            write_int <= '1';
         WHEN s12 => 
            gun_px_idx_int <= "01";
            module_select_int <= "01";
            write_int <= '1';
         WHEN s4 => 
            enable_int <= '1';
         WHEN s2 => 
            module_select_int <= "10";
            write_int <= '1';
         WHEN s5 => 
            win_or_lose_int <= '1';
            write_int <= '1';
            module_select_int <= "11";
         WHEN s6 => 
            win_or_lose_int <= '0';
            write_int <= '1';
            module_select_int <= "11";
         WHEN s7 => 
            enable_int <= '1';
         WHEN s18 => 
            frame_done_int <= '1';
         WHEN s9 => 
            enable_int <= '1';
         WHEN s19 => 
            frame_done_int <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s1,
      csm_to_s8,
      csm_to_s14
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s1 = '1') THEN
         csm_next_timer <= "101000000011011110011111"; -- no cycles(10500000)-1=10499999
      ELSIF (csm_to_s8 = '1') THEN
         csm_next_timer <= "101000000011011110011111"; -- no cycles(10500000)-1=10499999
      ELSIF (csm_to_s14 = '1') THEN
         csm_next_timer <= "101000000011011110011111"; -- no cycles(10500000)-1=10499999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
