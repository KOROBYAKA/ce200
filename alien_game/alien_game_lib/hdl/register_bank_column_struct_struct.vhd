-- VHDL Entity alien_game_lib.register_bank_column_struct.symbol
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-306-SPC)
--          at - 22:00:47  6.04.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY register_bank_column_struct IS
   PORT( 
      clk          : IN     std_logic;
      color_in     : IN     std_logic_vector (23 DOWNTO 0);
      nullify      : IN     std_logic;
      rst_n        : IN     std_logic;
      write_enable : IN     std_logic;
      x_in         : IN     std_logic_vector (7 DOWNTO 0);
      y_in         : IN     std_logic_vector (7 DOWNTO 0);
      color_output : OUT    std_logic_vector (23 DOWNTO 0)
   );

-- Declarations

END register_bank_column_struct ;

--
-- VHDL Architecture alien_game_lib.register_bank_column_struct.struct
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-306-SPC)
--          at - 22:00:46  6.04.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF register_bank_column_struct IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL color_output1 : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_output2 : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_output3 : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_output4 : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_output5 : std_logic_vector(23 DOWNTO 0);
   SIGNAL color_output6 : std_logic_vector(23 DOWNTO 0);
   SIGNAL din5          : std_logic_vector(23 DOWNTO 0);
   SIGNAL din6          : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout          : std_logic;
   SIGNAL dout0         : std_logic;
   SIGNAL dout1         : std_logic;
   SIGNAL dout10        : std_logic;
   SIGNAL dout11        : std_logic;
   SIGNAL dout12        : std_logic;
   SIGNAL dout13        : std_logic;
   SIGNAL dout14        : std_logic;
   SIGNAL dout2         : std_logic;
   SIGNAL dout3         : std_logic;
   SIGNAL dout4         : std_logic;
   SIGNAL dout5         : std_logic;
   SIGNAL dout6         : std_logic;
   SIGNAL dout7         : std_logic;
   SIGNAL dout8         : std_logic;
   SIGNAL dout9         : std_logic;


   -- ModuleWare signal declarations(v1.12) for instance 'U_8' of 'split'
   SIGNAL mw_U_8temp_din : std_logic_vector(7 DOWNTO 0);

   -- Component Declarations
   COMPONENT register_bank_row_struct
   PORT (
      clk          : IN     std_logic ;
      color_in     : IN     std_logic_vector (23 DOWNTO 0);
      nullifier    : IN     std_logic ;
      rst_n        : IN     std_logic ;
      write_enable : IN     std_logic ;
      x_in         : IN     std_logic_vector (7 DOWNTO 0);
      color_output : OUT    std_logic_vector (23 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : register_bank_row_struct USE ENTITY alien_game_lib.register_bank_row_struct;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_10' of 'and'
   dout <= dout0 AND write_enable;

   -- ModuleWare code(v1.12) for instance 'U_11' of 'and'
   dout1 <= dout14 AND write_enable;

   -- ModuleWare code(v1.12) for instance 'U_12' of 'and'
   dout2 <= dout13 AND write_enable;

   -- ModuleWare code(v1.12) for instance 'U_13' of 'and'
   dout3 <= dout12 AND write_enable;

   -- ModuleWare code(v1.12) for instance 'U_14' of 'and'
   dout4 <= dout11 AND write_enable;

   -- ModuleWare code(v1.12) for instance 'U_15' of 'and'
   dout5 <= dout10 AND write_enable;

   -- ModuleWare code(v1.12) for instance 'U_16' of 'and'
   dout6 <= dout9 AND write_enable;

   -- ModuleWare code(v1.12) for instance 'U_17' of 'and'
   dout7 <= write_enable AND dout8;

   -- ModuleWare code(v1.12) for instance 'U_9' of 'omux'
   u_9combo_proc: PROCESS(color_output6, color_output1, color_output2, 
                          color_output3, color_output4, din5, din6, 
                          color_output5, y_in)
   BEGIN
      color_output <= (OTHERS => 'X');
      CASE y_in IS
      WHEN "00000001" => color_output <= color_output6;
      WHEN "00000010" => color_output <= color_output1;
      WHEN "00000100" => color_output <= color_output2;
      WHEN "00001000" => color_output <= color_output3;
      WHEN "00010000" => color_output <= color_output4;
      WHEN "00100000" => color_output <= din5;
      WHEN "01000000" => color_output <= din6;
      WHEN "10000000" => color_output <= color_output5;
      WHEN OTHERS => color_output <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_9combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'split'
   mw_U_8temp_din <= y_in;
   u_8combo_proc: PROCESS (mw_U_8temp_din)
   VARIABLE temp_din: std_logic_vector(7 DOWNTO 0);
   BEGIN
      temp_din := mw_U_8temp_din(7 DOWNTO 0);
      dout0 <= temp_din(0);
      dout14 <= temp_din(1);
      dout13 <= temp_din(2);
      dout12 <= temp_din(3);
      dout11 <= temp_din(4);
      dout10 <= temp_din(5);
      dout9 <= temp_din(6);
      dout8 <= temp_din(7);
   END PROCESS u_8combo_proc;

   -- Instance port mappings.
   U_0 : register_bank_row_struct
      PORT MAP (
         clk          => clk,
         color_in     => color_in,
         nullifier    => nullify,
         rst_n        => rst_n,
         write_enable => dout2,
         x_in         => x_in,
         color_output => color_output2
      );
   U_1 : register_bank_row_struct
      PORT MAP (
         clk          => clk,
         color_in     => color_in,
         nullifier    => nullify,
         rst_n        => rst_n,
         write_enable => dout3,
         x_in         => x_in,
         color_output => color_output3
      );
   U_2 : register_bank_row_struct
      PORT MAP (
         clk          => clk,
         color_in     => color_in,
         nullifier    => nullify,
         rst_n        => rst_n,
         write_enable => dout1,
         x_in         => x_in,
         color_output => color_output1
      );
   U_3 : register_bank_row_struct
      PORT MAP (
         clk          => clk,
         color_in     => color_in,
         nullifier    => nullify,
         rst_n        => rst_n,
         write_enable => dout,
         x_in         => x_in,
         color_output => color_output6
      );
   U_4 : register_bank_row_struct
      PORT MAP (
         clk          => clk,
         color_in     => color_in,
         nullifier    => nullify,
         rst_n        => rst_n,
         write_enable => dout4,
         x_in         => x_in,
         color_output => color_output4
      );
   U_5 : register_bank_row_struct
      PORT MAP (
         clk          => clk,
         color_in     => color_in,
         nullifier    => nullify,
         rst_n        => rst_n,
         write_enable => dout5,
         x_in         => x_in,
         color_output => din5
      );
   U_6 : register_bank_row_struct
      PORT MAP (
         clk          => clk,
         color_in     => color_in,
         nullifier    => nullify,
         rst_n        => rst_n,
         write_enable => dout6,
         x_in         => x_in,
         color_output => din6
      );
   U_7 : register_bank_row_struct
      PORT MAP (
         clk          => clk,
         color_in     => color_in,
         nullifier    => nullify,
         rst_n        => rst_n,
         write_enable => dout7,
         x_in         => x_in,
         color_output => color_output5
      );

END struct;
