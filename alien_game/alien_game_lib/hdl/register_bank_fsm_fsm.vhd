-- VHDL Entity alien_game_lib.register_bank_fsm.symbol
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-306-SPC)
--          at - 21:27:56  6.04.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY register_bank_fsm IS
   PORT( 
      clk          : IN     std_logic;
      frame_done   : IN     std_logic;
      rst          : IN     std_logic;
      lower        : OUT    std_logic;
      lower_nulify : OUT    std_logic;
      upper        : OUT    std_logic;
      upper_nulify : OUT    std_logic
   );

-- Declarations

END register_bank_fsm ;

--
-- VHDL Architecture alien_game_lib.register_bank_fsm.fsm
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-306-SPC)
--          at - 22:09:08  6.04.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF register_bank_fsm IS

   TYPE STATE_TYPE IS (
      s0,
      s1
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      frame_done
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (frame_done = '1') THEN 
               next_state <= s1;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (frame_done = '1') THEN 
               next_state <= s0;
            ELSE
               next_state <= s1;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state,
      frame_done
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      lower <= '0';
      lower_nulify <= '0';
      upper <= '0';
      upper_nulify <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            upper <= '1';
            lower <= '0';
            lower_nulify <= '0';
            upper_nulify <= '0';
            IF (frame_done = '1') THEN 
               lower_nulify <= '1';
            END IF;
         WHEN s1 => 
            upper <= '0';
            lower <= '1';
            lower_nulify <= '0';
            upper_nulify <= '0';
            IF (frame_done = '1') THEN 
               upper_nulify <= '1';
            END IF;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
