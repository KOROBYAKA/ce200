-- VHDL Entity alien_game_lib.gammaset.symbol
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-313-SPC)
--          at - 18:52:36 26.03.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY gammaset IS
   PORT( 
      clk      : IN     std_logic;
      rst      : IN     std_logic;
      rx_rdy   : IN     std_logic;
      bit_out  : OUT    std_logic;
      lat      : OUT    std_logic;
      sb       : OUT    std_logic;
      transmit : OUT    std_logic
   );

-- Declarations

END gammaset ;

--
-- VHDL Architecture alien_game_lib.gammaset.fsm
--
-- Created:
--          by - cvalzu.UNKNOWN (HTC219-306-SPC)
--          at - 22:12:47 30.03.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF gammaset IS

   -- Architecture Declarations
   SIGNAL c : integer RANGE 0 TO 18;  
   SIGNAL gamma : std_logic_vector(17 DOWNTO 0);  
   SIGNAL i : integer RANGE 0 TO 18;  
   SIGNAL j : integer RANGE 0 TO 155;  

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s5,
      s3
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL bit_out_int : std_logic ;
   SIGNAL sb_int : std_logic ;
   SIGNAL transmit_int : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= s0;
         -- Default Reset Values
         c <= 0;
         gamma <= "001110111111110101";
         i <= 0;
         j <= 0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         -- Registered output assignments
         bit_out <= bit_out_int;
         sb <= sb_int;
         transmit <= transmit_int;

         -- Combined Actions
         CASE current_state IS
            WHEN s3 => 
               IF (i = 17) THEN 
                  j <= j+1;
                  i <= 0;
               ELSIF (j = 28) THEN 
               ELSIF (i < 17) THEN 
                  i <= i+1;
               END IF;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      i,
      j,
      rx_rdy
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (rx_rdy = '1') THEN 
               next_state <= s3;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            next_state <= s3;
         WHEN s2 => 
            next_state <= s2;
         WHEN s5 => 
            IF (rx_rdy = '1') THEN 
               next_state <= s3;
            ELSE
               next_state <= s5;
            END IF;
         WHEN s3 => 
            IF (i = 17) THEN 
               next_state <= s5;
            ELSIF (j = 28) THEN 
               next_state <= s2;
            ELSIF (i < 17) THEN 
               next_state <= s1;
            ELSE
               next_state <= s3;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state,
      gamma,
      i
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      bit_out_int <= '0';
      sb_int <= '0';
      transmit_int <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN s2 => 
            lat <= '0';
            sb_int <= '1';
            transmit_int <= '0';
         WHEN s3 => 
            transmit_int <= '1';
            bit_out_int <= gamma(i);
            IF (i = 17) THEN 
               transmit_int <= '0';
            END IF;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
