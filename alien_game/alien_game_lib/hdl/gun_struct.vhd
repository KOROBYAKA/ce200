-- VHDL Entity alien_game_lib.gun.symbol
--
-- Created:
--          by - txdava.UNKNOWN (HTC219-304-SPC)
--          at - 18:25:12 19.03.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY gun IS
   PORT( 
      btn        : IN     std_logic_vector (3 DOWNTO 0);
      clk        : IN     std_logic;
      enable     : IN     std_logic;
      gun_px_idx : IN     std_logic_vector (1 DOWNTO 0);
      rst_n      : IN     std_logic;
      bullet_x   : OUT    std_logic_vector (7 DOWNTO 0);
      color      : OUT    std_logic_vector (23 DOWNTO 0);
      x          : OUT    std_logic_vector (7 DOWNTO 0);
      y          : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END gun ;

--
-- VHDL Architecture alien_game_lib.gun.struct
--
-- Created:
--          by - txdava.UNKNOWN (HTC219-316-SPC)
--          at - 15:39:59 20.03.2025
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF gun IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL dout   : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout1  : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout2  : std_logic;
   SIGNAL dout3  : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout4  : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout5  : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout6  : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout7  : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout8  : std_logic;
   SIGNAL dout9  : std_logic;
   SIGNAL q      : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_out  : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_out1 : std_logic_vector(7 DOWNTO 0);


   -- ModuleWare signal declarations(v1.12) for instance 'U_3' of 'adff'
   SIGNAL mw_U_3reg_cval : std_logic_vector(7 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_9' of 'fixshift'
   SIGNAL mw_U_9temp_dout : std_logic_vector(7 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_10' of 'fixshift'
   SIGNAL mw_U_10temp_dout : std_logic_vector(7 DOWNTO 0);

   -- Component Declarations
   COMPONENT gun_left_shifter
   PORT (
      x_in  : IN     std_logic_vector (7 DOWNTO 0);
      x_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT gun_right_shifter
   PORT (
      x_in  : IN     std_logic_vector (7 DOWNTO 0);
      x_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : gun_left_shifter USE ENTITY alien_game_lib.gun_left_shifter;
   FOR ALL : gun_right_shifter USE ENTITY alien_game_lib.gun_right_shifter;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_3' of 'adff'
   q <= mw_U_3reg_cval;
   u_3seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_3reg_cval <= "00010000";
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_3reg_cval <= dout;
      END IF;
   END PROCESS u_3seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_13' of 'and1'
   dout8 <= gun_px_idx(0) AND gun_px_idx(1);

   -- ModuleWare code(v1.12) for instance 'U_7' of 'constval'
   dout7 <= "10000000";

   -- ModuleWare code(v1.12) for instance 'U_8' of 'constval'
   dout6 <= "01000000";

   -- ModuleWare code(v1.12) for instance 'U_14' of 'constval'
   color <= "010110101011010101011010";

   -- ModuleWare code(v1.12) for instance 'U_16' of 'constval'
   dout9 <= '1';

   -- ModuleWare code(v1.12) for instance 'U_9' of 'fixshift'
   dout5 <= mw_U_9temp_dout;
   u_9combo_proc: PROCESS (dout3)
   BEGIN
      mw_U_9temp_dout <= (OTHERS => '0');
      mw_U_9temp_dout(7 DOWNTO 1) <= dout3(6 + 0 DOWNTO 0);
   END PROCESS u_9combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_10' of 'fixshift'
   dout4 <= mw_U_10temp_dout;
   u_10combo_proc: PROCESS (dout3)
   BEGIN
      mw_U_10temp_dout <= (OTHERS => '0');
      mw_U_10temp_dout(6 DOWNTO 0) <= dout3(7 + 0 DOWNTO 1 + 0);
   END PROCESS u_10combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_0' of 'mux'
   u_0combo_proc: PROCESS(q, dout3, enable)
   BEGIN
      CASE enable IS
      WHEN '0' => dout <= q;
      WHEN '1' => dout <= dout3;
      WHEN OTHERS => dout <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_0combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_4' of 'mux'
   u_4combo_proc: PROCESS(x_out1, x_out, btn)
   BEGIN
      CASE btn(1) IS
      WHEN '0' => dout1 <= x_out1;
      WHEN '1' => dout1 <= x_out;
      WHEN OTHERS => dout1 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_4combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_5' of 'mux'
   u_5combo_proc: PROCESS(q, dout1, dout2)
   BEGIN
      CASE dout2 IS
      WHEN '0' => dout3 <= q;
      WHEN '1' => dout3 <= dout1;
      WHEN OTHERS => dout3 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_5combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_11' of 'mux'
   u_11combo_proc: PROCESS(dout3, dout4, dout5, gun_px_idx)
   BEGIN
      CASE gun_px_idx IS
      WHEN "00" => x <= dout3;
      WHEN "01" => x <= dout4;
      WHEN "10" => x <= dout5;
      WHEN "11" => x <= dout3;
      WHEN OTHERS => x <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_11combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_12' of 'mux'
   u_12combo_proc: PROCESS(dout7, dout6, dout8)
   BEGIN
      CASE dout8 IS
      WHEN '0' => y <= dout7;
      WHEN '1' => y <= dout6;
      WHEN OTHERS => y <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_12combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_15' of 'mux'
   u_15combo_proc: PROCESS(q, dout9)
   BEGIN
      CASE dout9 IS
      WHEN '0' => bullet_x <= q;
      WHEN '1' => bullet_x <= q;
      WHEN OTHERS => bullet_x <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_15combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'sxor'
   dout2 <= btn(2) XOR btn(1);

   -- Instance port mappings.
   U_2 : gun_left_shifter
      PORT MAP (
         x_in  => q,
         x_out => x_out
      );
   U_1 : gun_right_shifter
      PORT MAP (
         x_in  => q,
         x_out => x_out1
      );

END struct;
